<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reyoma Cheen博客小屋</title>
  
  <subtitle>不怕万人阻挡，只怕自己投降。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-08-27T07:41:51.959Z</updated>
  <id>/</id>
  
  <author>
    <name>Ryoma Cheen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo-Next主题:博客内容美化</title>
    <link href="/2019/07/28/Hexo-Next%E4%B8%BB%E9%A2%98-%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9%E7%BE%8E%E5%8C%96/"/>
    <id>/2019/07/28/Hexo-Next主题-博客内容美化/</id>
    <published>2019-07-28T06:47:22.000Z</published>
    <updated>2019-08-27T07:41:51.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主题自带样式-文本居中引用"><a href="#主题自带样式-文本居中引用" class="headerlink" title="主题自带样式 文本居中引用"></a>主题自带样式 文本居中引用</h3><p>效果：</p><blockquote class="blockquote-center"><p>人生乃是一面镜子，<br>从镜子里认识自己，<br>我要称之为头等大事，<br>也只是我们追求的目的！</p></blockquote><p>源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% cq %&#125;</span><br><span class="line">人生乃是一面镜子，</span><br><span class="line">从镜子里认识自己，</span><br><span class="line">我要称之为头等大事，</span><br><span class="line">也只是我们追求的目的！</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><h3 id="主题自带样式-note-标"><a href="#主题自带样式-note-标" class="headerlink" title="主题自带样式 note 标"></a>主题自带样式 note 标</h3><h4 id="default-样式"><a href="#default-样式" class="headerlink" title="default 样式"></a>default 样式</h4><div class="note default">            <p>这里是 default 样式</p>          </div><p>源码为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note <span class="keyword">default</span> %&#125;</span><br><span class="line">这里是 <span class="keyword">default</span> 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><h4 id="primary-样式"><a href="#primary-样式" class="headerlink" title="primary 样式"></a>primary 样式</h4><div class="note primary">            <p>这里是 primary 样式</p>          </div><p>源码为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line">这里是 primary 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><h4 id="success-样式"><a href="#success-样式" class="headerlink" title="success 样式"></a>success 样式</h4><div class="note success">            <p>这里是 success 样式</p>          </div><p>源码为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">这里是 success 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><h4 id="info-样式"><a href="#info-样式" class="headerlink" title="info 样式"></a>info 样式</h4><div class="note info">            <p>这里是 info 样式</p>          </div><p>源码为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note info %&#125;</span><br><span class="line">这里是 info 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><h4 id="warning-样式"><a href="#warning-样式" class="headerlink" title="warning 样式"></a>warning 样式</h4><div class="note warning">            <p>这里是 warning 样式</p>          </div><p>源码为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note warning %&#125;</span><br><span class="line">这里是 warning 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><h4 id="danger-样式"><a href="#danger-样式" class="headerlink" title="danger 样式"></a>danger 样式</h4><div class="note danger">            <p>这里是 danger 样式</p>          </div><p>源码为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">这里是 danger 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><h4 id="danger-no-icon-样式"><a href="#danger-no-icon-样式" class="headerlink" title="danger no-icon 样式"></a>danger no-icon 样式</h4><div class="note danger no-icon">            <p>这里是 danger no-icon 样式</p>          </div><p>源码为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note danger no-icon %&#125;</span><br><span class="line">这里是 danger no-icon 样式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;主题自带样式-文本居中引用&quot;&gt;&lt;a href=&quot;#主题自带样式-文本居中引用&quot; class=&quot;headerlink&quot; title=&quot;主题自带样式 文本居中引用&quot;&gt;&lt;/a&gt;主题自带样式 文本居中引用&lt;/h3&gt;&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote class=
      
    
    </summary>
    
      <category term="Hexo" scheme="/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="/tags/hexo/"/>
    
      <category term="NexT内容美化" scheme="/tags/NexT%E5%86%85%E5%AE%B9%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>equals与==的区别</title>
    <link href="/2017/06/03/2017-06-03-equals%E4%B8%8E-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>/2017/06/03/2017-06-03-equals与-的区别/</id>
    <published>2017-06-03T00:34:31.000Z</published>
    <updated>2019-08-27T03:14:23.662Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>面试中这是个常见问题,记录下来备用</p>          </div><ul><li>== 是一个运算符。<br> equals则是string对象的方法。</li><li>java中 <strong>值类型</strong> 是存储在内存中的<strong>栈</strong>中。<br>而<strong>引用类型</strong>在栈中仅仅是存储引用类型变量的地址，而其本身则存储在<strong>堆</strong>中。所以字符串的内容相同，引用地址不一定相同，有可能创建了多个对象。</li><li>==操作比较的是两个变量的值是否相等，对于引用型变量表示的是两个变量在堆中存储的地址是否相同，即栈中的内容是否相同。</li><li>equals将此字符串与指定的对象比较。当且仅当该参数不为 null，并且是与此对象表示相同字符序列的 String 对象时，结果才为 true。即堆中的内容是否相同。==比较的是2个对象的地址（栈中），而equals比较的是2个对象的内容（堆中）。所以当equals为true时，==不一定为true。</li></ul><blockquote><p>下面是String类equals方法源码，它复写了类 Object 中的 equals方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>　　上面已经说到equals是比较两个对象的内容，我们可以看到方法中，先是比较两个String对象是否为同一对象，如果是就直接返回true（两个对象为同一对象那他们的内容必然相等）。<br>　　如果不是同一对象，先确定传入的对象是否是String类型，如果是，则比较两对象的字符序列（String类内部存储是用char[]实现的，可以查看源码了解），遍历过程中只要有一个字符不相同，就返回false，否则返回true。这里<strong>注意</strong>比较次数为第一个String对象的长度n，而不是传入的String对象参数的长度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note success&quot;&gt;
            &lt;p&gt;面试中这是个常见问题,记录下来备用&lt;/p&gt;
          &lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;== 是一个运算符。&lt;br&gt; equals则是string对象的方法。&lt;/li&gt;
&lt;li&gt;java中
      
    
    </summary>
    
      <category term="Java SE" scheme="/categories/Java-SE/"/>
    
    
      <category term="Java基础" scheme="/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java回顾" scheme="/tags/Java%E5%9B%9E%E9%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>Git学习</title>
    <link href="/2016/03/12/2019-07-20-Git%E5%AD%A6%E4%B9%A0/"/>
    <id>/2016/03/12/2019-07-20-Git学习/</id>
    <published>2016-03-12T04:19:04.000Z</published>
    <updated>2019-08-27T06:39:36.784Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>记录Git常用命令</p>          </div><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p>先用一幅图，从总体上描述主要git命令的工作流程<br><img src="https://img.lruihao.cn/imgs/2019/08/39eeee59001da23a.png" alt></p><ul><li>workspace: 本地的工作目录。（记作A）</li><li>index：缓存区域，临时保存本地改动。（记作B）</li><li>local repository: 本地仓库，只想最后一次提交HEAD。（记作C）</li><li>remote repository：远程仓库。（记作D）</li></ul><h4 id="二、命令笔记"><a href="#二、命令笔记" class="headerlink" title="二、命令笔记"></a>二、命令笔记</h4><p>以下所有的命令的功能说明，都采用上述的标记的A、B、C、D的方式来阐述。</p><blockquote><p>初始化</p></blockquote><ul><li><code>git init</code> //创建</li><li><code>git clone /path/to/repository</code> //检出</li><li><code>git config --global user.email &quot;you@example.com&quot;</code> //配置email</li><li><code>git config --global user.name &quot;Name&quot;</code> //配置用户名</li></ul><blockquote><p>操作</p></blockquote><ul><li><code>git add &lt;file&gt;</code>// 文件添加，A → B</li><li><code>git add .</code>// 所有文件添加，A → B</li><li><code>git commit -m &quot;代码提交信息&quot;</code>//文件提交，B → C</li><li><code>git commit --amend</code> //与上次commit合并, *B → C</li><li><code>git push origin master</code> //推送至master分支, C → D</li><li><code>git pull</code> //更新本地仓库至最新改动， D → A</li><li><code>git fetch</code> //抓取远程仓库更新， D → C</li><li><code>git log</code> //查看提交记录</li><li><code>git status</code> //查看修改状态</li><li><code>git diff</code>//查看详细修改内容</li><li><code>git show</code>//显示某次提交的内容</li></ul><blockquote><p>撤销操作</p></blockquote><ul><li><code>git reset &lt;file&gt;</code>//某个文件索引会回滚到最后一次提交， C → B</li><li><code>git reset</code>//索引会回滚到最后一次提交， C → B</li><li><code>git reset --hard</code> // 索引会回滚到最后一次提交， C → B → A</li><li><code>git checkout</code>// 从index复制到workspace， B → A</li><li><code>git checkout -- files</code> // 文件从index复制到workspace， B → A</li><li><code>git checkout HEAD -- files</code> // 文件从local repository复制到workspace， C → A</li></ul><blockquote><p>分支相关</p></blockquote><ul><li><code>git checkout -b branch_name</code> //创建名叫“branch_name”的分支，并切换过去</li><li><code>git checkout master</code> //切换回主分支</li><li><code>git branch -d branch_name</code> // 删除名叫“branch_name”的分支</li><li><code>git push origin branch_name</code> //推送分支到远端仓库</li><li><code>git merge branch_name</code> // 合并分支branch_name到当前分支(如master)</li><li><code>git rebase</code> //衍合，线性化的自动， D → A</li></ul><blockquote><p>冲突处理</p></blockquote><ul><li><code>git diff</code> //对比workspace与index</li><li><code>git diff HEAD</code> //对于workspace与最后一次commit</li><li><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code> //对比差异</li><li><code>git add &lt;filename&gt;</code> //修改完冲突，需要add以标记合并成功</li></ul><blockquote><p>其他</p></blockquote><ul><li><code>gitk</code> //开灯图形化git</li><li><code>git config color.ui true</code> //彩色的 git 输出</li><li><code>git config format.pretty oneline</code> //显示历史记录时，每个提交的信息只显示一行</li><li><code>git add -i</code> //交互式添加文件到暂存区</li></ul><hr><p>如果想更深入地了解git用法，可参考：</p><ul><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">Git简明指南(中文版)</a></li><li><a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">图解Git</a></li><li><a href="https://git-scm.com/book/zh" target="_blank" rel="noopener">Git完整命令地址</a></li><li><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Git branching model</a></li><li><a href="http://www.techug.com/25-git-tips" target="_blank" rel="noopener">25个Git用法技巧</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;记录Git常用命令&lt;/p&gt;
          &lt;/div&gt;
&lt;h4 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述
      
    
    </summary>
    
      <category term="Git" scheme="/categories/Git/"/>
    
      <category term="git常用命令" scheme="/categories/Git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="git" scheme="/tags/git/"/>
    
  </entry>
  
</feed>
